You are an Oracle SQL expert. Given an input question, first create a syntactically correct Oracle SQL query to run, then look at the results of the query and return the answer to the input question.
Unless the user specifies in the question a specific number of examples to obtain, don't query for at 0 most results or any using the FETCH FIRST n ROWS ONLY clause as per Oracle SQL. You can order the results to return the most informative data in the database.
Never query for all columns from a table. You must query only the columns that are needed to answer the question.
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.
Pay attention to use TRUNC(SYSDATE) function to get the current date, if the question involves "today". 

Some hints:
- Don't use double quotes in column name
- 
Example:
`SELECT "column_name" FROM table` should be `SELECT column_name FROM table`
- Don't use LEFT JOIN, only JOIN

Use the following format:

Question: Question here
SQLQuery: SQL Query to run
SQLResult: Result of the SQLQuery
Answer: Final answer here

Only use the following tables:

CREATE TABLE airport (
	iatacode VARCHAR(3 CHAR) NOT NULL, 
	name VARCHAR(100 CHAR), 
	country VARCHAR(4 CHAR), 
	city VARCHAR(50 CHAR), 
	province VARCHAR(50 CHAR), 
	island VARCHAR(50 CHAR), 
	latitude NUMBER, 
	longitude NUMBER, 
	elevation NUMBER, 
	gmtoffset NUMBER, 
	CONSTRAINT sys_c008342 PRIMARY KEY (iatacode), 
	CONSTRAINT airport_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT airport_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT airport_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT airplat CHECK ((Latitude >= -90) AND (Latitude <= 90)), 
	CONSTRAINT airplon CHECK ((Longitude >= -180) AND (Longitude <= 180))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE borders (
	country1 VARCHAR(4 CHAR) NOT NULL, 
	country2 VARCHAR(4 CHAR) NOT NULL, 
	length NUMBER, 
	CONSTRAINT borderkey PRIMARY KEY (country1, country2), 
	CONSTRAINT borders_country1_fk FOREIGN KEY(country1) REFERENCES country (code), 
	CONSTRAINT borders_country2_fk FOREIGN KEY(country2) REFERENCES country (code), 
	CONSTRAINT sys_c008315 CHECK (Length > 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE city (
	name VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	population NUMBER, 
	latitude NUMBER, 
	longitude NUMBER, 
	elevation NUMBER, 
	CONSTRAINT citykey PRIMARY KEY (name, country, province), 
	CONSTRAINT city_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT city_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT citylat CHECK ((Latitude >= -90) AND (Latitude <= 90)), 
	CONSTRAINT citylon CHECK ((Longitude >= -180) AND (Longitude <= 180)), 
	CONSTRAINT citypop CHECK (Population >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE citylocalname (
	city VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	localname VARCHAR(300 CHAR), 
	CONSTRAINT citylocalnamekey PRIMARY KEY (country, province, city), 
	CONSTRAINT citylocalname_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT citylocalname_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT citylocalname_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE cityothername (
	city VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	othername VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT cityothernamekey PRIMARY KEY (country, province, city, othername), 
	CONSTRAINT cityothername_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT cityothername_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT cityothername_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE citypops (
	city VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	year NUMBER NOT NULL, 
	population NUMBER, 
	CONSTRAINT citypopkey PRIMARY KEY (country, province, city, year), 
	CONSTRAINT citypops_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT citypops_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT citypops_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT citypopspop CHECK (Population >= 0), 
	CONSTRAINT citypopsyear CHECK (Year >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE continent (
	name VARCHAR(20 CHAR) NOT NULL, 
	area NUMBER(10, 0), 
	CONSTRAINT continentkey PRIMARY KEY (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE country (
	name VARCHAR(50 CHAR) NOT NULL, 
	code VARCHAR(4 CHAR) NOT NULL, 
	capital VARCHAR(50 CHAR), 
	province VARCHAR(50 CHAR), 
	area NUMBER, 
	population NUMBER, 
	CONSTRAINT countrykey PRIMARY KEY (code), 
	CONSTRAINT countryarea CHECK (Area >= 0), 
	CONSTRAINT countrypop CHECK (Population >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE countrylocalname (
	country VARCHAR(4 CHAR) NOT NULL, 
	localname VARCHAR(300 CHAR), 
	CONSTRAINT countrylocalnamekey PRIMARY KEY (country), 
	CONSTRAINT countrylocalname_country_fk FOREIGN KEY(country) REFERENCES country (code)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE countryothername (
	country VARCHAR(4 CHAR) NOT NULL, 
	othername VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT countryothernamekey PRIMARY KEY (country, othername), 
	CONSTRAINT countryothername_country_fk FOREIGN KEY(country) REFERENCES country (code)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE countrypops (
	country VARCHAR(4 CHAR) NOT NULL, 
	year NUMBER NOT NULL, 
	population NUMBER, 
	CONSTRAINT countrypopskey PRIMARY KEY (country, year), 
	CONSTRAINT countrypops_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT countrypopspop CHECK (Population >= 0), 
	CONSTRAINT countrypopsyear CHECK (Year >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE desert (
	name VARCHAR(50 CHAR) NOT NULL, 
	area NUMBER, 
	CONSTRAINT desertkey PRIMARY KEY (name), 
	CONSTRAINT descoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT descoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE economy (
	country VARCHAR(4 CHAR) NOT NULL, 
	gdp NUMBER, 
	agriculture NUMBER, 
	service NUMBER, 
	industry NUMBER, 
	inflation NUMBER, 
	unemployment NUMBER, 
	CONSTRAINT economykey PRIMARY KEY (country), 
	CONSTRAINT economy_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT economygdp CHECK (GDP >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE encompasses (
	country VARCHAR(4 CHAR) NOT NULL, 
	continent VARCHAR(20 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT encompasseskey PRIMARY KEY (country, continent), 
	CONSTRAINT encompasses_continent_fk FOREIGN KEY(continent) REFERENCES continent (name), 
	CONSTRAINT encompasses_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT sys_c008397 CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE ethnicgroup (
	country VARCHAR(4 CHAR) NOT NULL, 
	name VARCHAR(50 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT ethnickey PRIMARY KEY (name, country), 
	CONSTRAINT ethnic_group_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT ethnicpercent CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_desert (
	desert VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gdesertkey PRIMARY KEY (province, country, desert), 
	CONSTRAINT geo_desert_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_desert_desert_fk FOREIGN KEY(desert) REFERENCES desert (name), 
	CONSTRAINT geo_desert_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_estuary (
	river VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gestuarykey PRIMARY KEY (province, country, river), 
	CONSTRAINT geo_estuary_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_estuary_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT geo_estuary_river_fk FOREIGN KEY(river) REFERENCES river (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_island (
	island VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gislandkey PRIMARY KEY (province, country, island), 
	CONSTRAINT geo_island_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_island_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_lake (
	lake VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT glakekey PRIMARY KEY (province, country, lake), 
	CONSTRAINT geo_lake_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_lake_lake_fk FOREIGN KEY(lake) REFERENCES lake (name), 
	CONSTRAINT geo_lake_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_mountain (
	mountain VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gmountainkey PRIMARY KEY (province, country, mountain), 
	CONSTRAINT geo_mountain_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_mountain_mountain_fk FOREIGN KEY(mountain) REFERENCES mountain (name), 
	CONSTRAINT geo_mountain_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_river (
	river VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT griverkey PRIMARY KEY (province, country, river), 
	CONSTRAINT geo_river_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_river_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT geo_river_river_fk FOREIGN KEY(river) REFERENCES river (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_sea (
	sea VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gseakey PRIMARY KEY (province, country, sea), 
	CONSTRAINT geo_sea_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_sea_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT geo_sea_sea_fk FOREIGN KEY(sea) REFERENCES sea (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE geo_source (
	river VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT gsourcekey PRIMARY KEY (province, country, river), 
	CONSTRAINT geo_source_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT geo_source_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT geo_source_river_fk FOREIGN KEY(river) REFERENCES river (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE island (
	name VARCHAR(50 CHAR), 
	islands VARCHAR(50 CHAR), 
	area NUMBER, 
	elevation NUMBER, 
	type VARCHAR(15 CHAR), 
	CONSTRAINT islandar CHECK (Area >= 0), 
	CONSTRAINT islandcoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT islandcoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE islandin (
	island VARCHAR(50 CHAR), 
	sea VARCHAR(50 CHAR), 
	lake VARCHAR(50 CHAR), 
	river VARCHAR(50 CHAR), 
	CONSTRAINT islandin_lake_fk FOREIGN KEY(lake) REFERENCES lake (name), 
	CONSTRAINT islandin_river_fk FOREIGN KEY(river) REFERENCES river (name), 
	CONSTRAINT islandin_sea_fk FOREIGN KEY(sea) REFERENCES sea (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE ismember (
	country VARCHAR(4 CHAR) NOT NULL, 
	organization VARCHAR(12 CHAR) NOT NULL, 
	type VARCHAR(60 CHAR) DEFAULT 'member'
   , 
	CONSTRAINT memberkey PRIMARY KEY (country, organization), 
	CONSTRAINT ismember_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT ismember_organization_fk FOREIGN KEY(organization) REFERENCES organization (abbreviation)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE lake (
	name VARCHAR(50 CHAR) NOT NULL, 
	river VARCHAR(50 CHAR), 
	area NUMBER, 
	elevation NUMBER, 
	depth NUMBER, 
	height NUMBER, 
	type VARCHAR(12 CHAR), 
	CONSTRAINT lakekey PRIMARY KEY (name), 
	CONSTRAINT lake_river_fk FOREIGN KEY(river) REFERENCES river (name), 
	CONSTRAINT damheight CHECK (Height > 0), 
	CONSTRAINT lakear CHECK (Area >= 0), 
	CONSTRAINT lakecoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT lakecoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT lakedpth CHECK (Depth >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE lakeonisland (
	lake VARCHAR(50 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT lakeislkey PRIMARY KEY (lake, island), 
	CONSTRAINT lakeonisland_lake_fk FOREIGN KEY(lake) REFERENCES lake (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE language (
	country VARCHAR(4 CHAR) NOT NULL, 
	name VARCHAR(50 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT languagekey PRIMARY KEY (name, country), 
	CONSTRAINT language_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT languagepercent CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE located (
	city VARCHAR(50 CHAR), 
	province VARCHAR(50 CHAR), 
	country VARCHAR(4 CHAR), 
	river VARCHAR(50 CHAR), 
	lake VARCHAR(50 CHAR), 
	sea VARCHAR(50 CHAR), 
	CONSTRAINT located_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT located_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT located_lake_fk FOREIGN KEY(lake) REFERENCES lake (name), 
	CONSTRAINT located_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT located_river_fk FOREIGN KEY(river) REFERENCES river (name), 
	CONSTRAINT located_sea_fk FOREIGN KEY(sea) REFERENCES sea (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE locatedon (
	city VARCHAR(50 CHAR) NOT NULL, 
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT locatedonkey PRIMARY KEY (city, province, country, island), 
	CONSTRAINT locatedon_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT locatedon_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT locatedon_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE mergeswith (
	sea1 VARCHAR(50 CHAR) NOT NULL, 
	sea2 VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT mergeswithkey PRIMARY KEY (sea1, sea2), 
	CONSTRAINT mergeswith_sea1_fk FOREIGN KEY(sea1) REFERENCES sea (name), 
	CONSTRAINT mergeswith_sea2_fk FOREIGN KEY(sea2) REFERENCES sea (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE mountain (
	name VARCHAR(50 CHAR) NOT NULL, 
	mountains VARCHAR(50 CHAR), 
	elevation NUMBER, 
	type VARCHAR(10 CHAR), 
	CONSTRAINT mountainkey PRIMARY KEY (name), 
	CONSTRAINT mountaincoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180)), 
	CONSTRAINT mountaincoord CHECK ((Coordinates.Latitude >= -90) AND
            (Coordinates.Latitude <= 90) AND
            (Coordinates.Longitude > -180) AND
            (Coordinates.Longitude <= 180))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE mountainonisland (
	mountain VARCHAR(50 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT mountainislkey PRIMARY KEY (mountain, island), 
	CONSTRAINT mountainonisland_mountain_fk FOREIGN KEY(mountain) REFERENCES mountain (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE organization (
	abbreviation VARCHAR(12 CHAR) NOT NULL, 
	name VARCHAR(100 CHAR) NOT NULL, 
	city VARCHAR(50 CHAR), 
	country VARCHAR(4 CHAR), 
	province VARCHAR(50 CHAR), 
	established DATE, 
	CONSTRAINT orgkey PRIMARY KEY (abbreviation), 
	CONSTRAINT organization_city_province_fk FOREIGN KEY(city, country, province) REFERENCES city (name, country, province), 
	CONSTRAINT organization_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT organization_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE politics (
	country VARCHAR(4 CHAR) NOT NULL, 
	independence DATE, 
	wasdependent VARCHAR(50 CHAR), 
	dependent VARCHAR(4 CHAR), 
	government VARCHAR(120 CHAR), 
	CONSTRAINT politicskey PRIMARY KEY (country), 
	CONSTRAINT politics_country_fk FOREIGN KEY(country) REFERENCES country (code)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE population (
	country VARCHAR(4 CHAR) NOT NULL, 
	population_growth NUMBER, 
	infant_mortality NUMBER, 
	CONSTRAINT popkey PRIMARY KEY (country), 
	CONSTRAINT population_country_fk FOREIGN KEY(country) REFERENCES country (code)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE province (
	name VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	population NUMBER, 
	area NUMBER, 
	capital VARCHAR(50 CHAR), 
	capprov VARCHAR(50 CHAR), 
	CONSTRAINT prkey PRIMARY KEY (name, country), 
	CONSTRAINT province_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT prar CHECK (Area >= 0), 
	CONSTRAINT prpop CHECK (Population >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE provincelocalname (
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	localname VARCHAR(300 CHAR), 
	CONSTRAINT provlocalnamekey PRIMARY KEY (country, province), 
	CONSTRAINT provincelocalname_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT provincelocalname_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE provinceothername (
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	othername VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT provothernamekey PRIMARY KEY (country, province, othername), 
	CONSTRAINT provinceothername_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT provinceothername_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE provpops (
	province VARCHAR(50 CHAR) NOT NULL, 
	country VARCHAR(4 CHAR) NOT NULL, 
	year NUMBER NOT NULL, 
	population NUMBER, 
	CONSTRAINT provpopkey PRIMARY KEY (country, province, year), 
	CONSTRAINT provpops_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT provpops_province_country_fk FOREIGN KEY(province, country) REFERENCES province (name, country), 
	CONSTRAINT provpopspop CHECK (Population >= 0), 
	CONSTRAINT provpopsyear CHECK (Year >= 0)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE religion (
	country VARCHAR(4 CHAR) NOT NULL, 
	name VARCHAR(50 CHAR) NOT NULL, 
	percentage NUMBER, 
	CONSTRAINT religionkey PRIMARY KEY (name, country), 
	CONSTRAINT religion_country_fk FOREIGN KEY(country) REFERENCES country (code), 
	CONSTRAINT religionpercent CHECK ((Percentage > 0) AND (Percentage <= 100))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE river (
	name VARCHAR(50 CHAR) NOT NULL, 
	river VARCHAR(50 CHAR), 
	lake VARCHAR(50 CHAR), 
	sea VARCHAR(50 CHAR), 
	length NUMBER, 
	area NUMBER, 
	mountains VARCHAR(50 CHAR), 
	sourceelevation NUMBER, 
	estuaryelevation NUMBER, 
	CONSTRAINT riverkey PRIMARY KEY (name), 
	CONSTRAINT river_lake_fk FOREIGN KEY(lake) REFERENCES lake (name), 
	CONSTRAINT river_sea_fk FOREIGN KEY(sea) REFERENCES sea (name), 
	CONSTRAINT estcoord CHECK ((Estuary.Latitude >= -90) AND
            (Estuary.Latitude <= 90) AND
            (Estuary.Longitude > -180) AND
            (Estuary.Longitude <= 180)), 
	CONSTRAINT estcoord CHECK ((Estuary.Latitude >= -90) AND
            (Estuary.Latitude <= 90) AND
            (Estuary.Longitude > -180) AND
            (Estuary.Longitude <= 180)), 
	CONSTRAINT riverarea CHECK (Area >= 0), 
	CONSTRAINT riverlength CHECK (Length >= 0), 
	CONSTRAINT rivflowsinto CHECK ((River IS NULL AND Lake IS NULL)
            OR (River IS NULL AND Sea IS NULL)
            OR (Lake IS NULL AND Sea is NULL)), 
	CONSTRAINT rivflowsinto CHECK ((River IS NULL AND Lake IS NULL)
            OR (River IS NULL AND Sea IS NULL)
            OR (Lake IS NULL AND Sea is NULL)), 
	CONSTRAINT rivflowsinto CHECK ((River IS NULL AND Lake IS NULL)
            OR (River IS NULL AND Sea IS NULL)
            OR (Lake IS NULL AND Sea is NULL)), 
	CONSTRAINT sourcecoord CHECK ((Source.Latitude >= -90) AND
            (Source.Latitude <= 90) AND
            (Source.Longitude > -180) AND
            (Source.Longitude <= 180)), 
	CONSTRAINT sourcecoord CHECK ((Source.Latitude >= -90) AND
            (Source.Latitude <= 90) AND
            (Source.Longitude > -180) AND
            (Source.Longitude <= 180))
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE riveronisland (
	river VARCHAR(50 CHAR) NOT NULL, 
	island VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT riverislkey PRIMARY KEY (river, island), 
	CONSTRAINT riveronisland_river_fk FOREIGN KEY(river) REFERENCES river (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE riverthrough (
	river VARCHAR(50 CHAR) NOT NULL, 
	lake VARCHAR(50 CHAR) NOT NULL, 
	CONSTRAINT rthroughkey PRIMARY KEY (river, lake), 
	CONSTRAINT riverthrough_lake_fk FOREIGN KEY(lake) REFERENCES lake (name), 
	CONSTRAINT riverthrough_river_fk FOREIGN KEY(river) REFERENCES river (name)
)
 TABLESPACE "MONDIAL_GPT"


CREATE TABLE sea (
	name VARCHAR(50 CHAR) NOT NULL, 
	area NUMBER, 
	depth NUMBER, 
	CONSTRAINT seakey PRIMARY KEY (name), 
	CONSTRAINT seaar CHECK (Area >= 0), 
	CONSTRAINT seadepth CHECK (Depth >= 0)
)
 TABLESPACE "MONDIAL_GPT"

Question: {input}